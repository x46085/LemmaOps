{
  "name": "statsd",
  "description": "A simple, lightweight network daemon to collect metrics over UDP",
  "author": {
    "name": "Etsy"
  },
  "scripts": {
    "test": "./run_tests.sh",
    "start": "node stats.js config.js",
    "install-windows-service": "node_modules\\.bin\\winser -i",
    "uninstall-windows-service": "node_modules\\.bin\\winser -r"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/etsy/statsd.git"
  },
  "version": "0.7.1",
  "dependencies": {
    "node-syslog": "1.1.7",
    "hashring": "1.0.1",
    "winser": "=0.1.6"
  },
  "devDependencies": {
    "nodeunit": "0.7.x",
    "underscore": "1.4.x",
    "temp": "0.4.x"
  },
  "optionalDependencies": {
    "node-syslog": "1.1.7",
    "hashring": "1.0.1",
    "winser": "=0.1.6"
  },
  "engines": {
    "node": ">=0.8"
  },
  "bin": {
    "statsd": "./bin/statsd"
  },
  "readme": "StatsD [![Build Status][travis-ci_status_img]][travis-ci_statsd]\n======\n\nA network daemon that runs on the [Node.js][node] platform and\nlistens for statistics, like counters and timers, sent over [UDP][udp]\nand sends aggregates to one or more pluggable backend services (e.g.,\n[Graphite][graphite]).\n\nWe ([Etsy][etsy]) [blogged][blog post] about how it works and why we created it.\n\nInspiration\n-----------\n\nStatsD was inspired (heavily) by the project (of the same name) at Flickr.\nHere's a post where Cal Henderson described it in depth:\n[Counting and timing][counting-timing]\nCal re-released the code recently:\n[Perl StatsD][Flicker-StatsD]\n\nKey Concepts\n--------\n\n* *buckets*\n  Each stat is in its own \"bucket\". They are not predefined anywhere. Buckets\ncan be named anything that will translate to Graphite (periods make folders,\netc)\n\n* *values*\n  Each stat will have a value. How it is interpreted depends on modifiers. In\ngeneral values should be integer.\n\n* *flush*\n  After the flush interval timeout (defined by `config.flushInterval`,\n  default 10 seconds), stats are aggregated and sent to an upstream backend service.\n\n\nInstallation and Configuration\n------------------------------\n\n * Install node.js\n * Clone the project\n * Create a config file from exampleConfig.js and put it somewhere\n * Start the Daemon:\n\n    node stats.js /path/to/config\n\nMore Specific Topics\n--------\n* [Metric Types][docs_metric_types]\n* [Graphite Integration][docs_graphite]\n* [Supported Backends][docs_backend]\n* [Admin TCP Interface][docs_admin_interface]\n* [Backend Interface][docs_backend_interface]\n* [Metric Namespacing][docs_namespacing]\n* [Statsd Cluster Proxy][docs_cluster_proxy]\n\nDebugging\n---------\n\nThere are additional config variables available for debugging:\n\n* `debug` - log exceptions and print out more diagnostic info\n* `dumpMessages` - print debug info on incoming messages\n\nFor more information, check the `exampleConfig.js`.\n\n\nTests\n-----\n\nA test framework has been added using node-unit and some custom code to start\nand manipulate statsd. Please add tests under test/ for any new features or bug\nfixes encountered. Testing a live server can be tricky, attempts were made to\neliminate race conditions but it may be possible to encounter a stuck state. If\ndoing dev work, a `killall statsd` will kill any stray test servers in the\nbackground (don't do this on a production machine!).\n\nTests can be executed with `./run_tests.sh`.\n\n\nMeta\n---------\n- IRC channel: `#statsd` on freenode\n- Mailing list: `statsd@librelist.com`\n\n\n\n[graphite]: http://graphite.wikidot.com\n[etsy]: http://www.etsy.com\n[blog post]: http://codeascraft.etsy.com/2011/02/15/measure-anything-measure-everything/\n[node]: http://nodejs.org\n[nodemods]: http://nodejs.org/api/modules.html\n[counting-timing]: http://code.flickr.com/blog/2008/10/27/counting-timing/\n[Flicker-StatsD]: https://github.com/iamcal/Flickr-StatsD\n[udp]: http://en.wikipedia.org/wiki/User_Datagram_Protocol\n[docs_metric_types]: https://github.com/etsy/statsd/blob/master/docs/metric_types.md\n[docs_graphite]: https://github.com/etsy/statsd/blob/master/docs/graphite.md\n[docs_backend]: https://github.com/etsy/statsd/blob/master/docs/backend.md\n[docs_admin_interface]: https://github.com/etsy/statsd/blob/master/docs/admin_interface.md\n[docs_backend_interface]: https://github.com/etsy/statsd/blob/master/docs/backend_interface.md\n[docs_namespacing]: https://github.com/etsy/statsd/blob/master/docs/namespacing.md\n[docs_cluster_proxy]: https://github.com/etsy/statsd/blob/master/docs/cluster_proxy.md\n[travis-ci_status_img]: https://travis-ci.org/etsy/statsd.png?branch=backends-as-packages\n[travis-ci_statsd]: https://travis-ci.org/etsy/statsd\n",
  "readmeFilename": "README.md",
  "_id": "statsd@0.7.1",
  "_from": "statsd@*"
}
